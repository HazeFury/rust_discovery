ğŸš€ Exercice : Gestion d'un magasin avec erreurs et types gÃ©nÃ©riques
Tu vas crÃ©er un programme qui gÃ¨re un stock dâ€™articles pour un magasin en utilisant :
âœ” GÃ©nÃ©riques (T) pour permettre plusieurs types de produits
âœ” Option<T> pour rechercher un produit (prÃ©sent ou non)
âœ” Result<T, E> pour gÃ©rer les erreurs d'achat
âœ” ? pour simplifier le code
âœ” unwrap() pour tester rapidement
âœ” vec![] pour stocker les produits

ğŸ“Œ Consignes :
CrÃ©er une structure Product<T> avec :

name (nom du produit, String)
price (prix du produit, f64)
stock (quantitÃ© en stock, u32)
category (type gÃ©nÃ©rique T, exemple : "Alimentaire", "Ã‰lectronique")
CrÃ©er une structure Store qui contient un Vec<Product<T>> pour stocker les articles.

ImplÃ©menter ces mÃ©thodes dans Store :

find_product(&self, name: &str) -> Option<&Product<T>>
ğŸ”¹ Recherche un produit par son nom (retourne Some(&Product<T>) ou None).

buy_product(&mut self, name: &str, quantity: u32) -> Result<f64, String>
ğŸ”¹ AchÃ¨te un produit :

Si le produit existe et quâ€™il y a assez de stock, diminue la quantitÃ© et retourne le prix total.
Sinon, retourne une erreur (Err("Stock insuffisant")).


âœ¨ Exemple attendu :

fn main() {
    let mut store = Store {
        products: vec![
            Product { name: String::from("Pomme"), price: 0.5, stock: 10, category: "Alimentaire" },
            Product { name: String::from("Ordinateur"), price: 999.99, stock: 3, category: "Ã‰lectronique" },
        ],
    };

    // Recherche un produit existant
    let found = store.find_product("Pomme");
    println!("{:?}", found.unwrap());

    // Achat rÃ©ussi
    match store.buy_product("Pomme", 5) {
        Ok(total) => println!("Achat rÃ©ussi ! Total: {}â‚¬", total),
        Err(e) => println!("Erreur: {}", e),
    }

    // Achat Ã©chouÃ© (stock insuffisant)
    match store.buy_product("Ordinateur", 10) {
        Ok(total) => println!("Achat rÃ©ussi ! Total: {}â‚¬", total),
        Err(e) => println!("Erreur: {}", e),
    }
}


ğŸ’¡ Indice pour tâ€™aider :

Pour find_product(), utilise .iter().find()
Pour buy_product(), utilise if let Some(...) pour vÃ©rifier si le produit existe
Pense Ã  bien gÃ©rer le stock dans buy_product()